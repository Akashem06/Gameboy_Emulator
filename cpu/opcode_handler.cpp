#include "opcode_handler.hpp"

#include "cpu.hpp"
#include "log.hpp"
#include "opcode_cycles.hpp"
#include "opcode_names.hpp"

OpcodeHandler::OpcodeHandler(CPU *cpu) : cpu(cpu) {}

// clang-format off

Cycles OpcodeHandler::handle_opcode(u8 opcode) {
  log_trace("%s (0x%x)", opcode_names[opcode].c_str(), opcode);

  switch (opcode) {
        case 0x00U: opcode_00(); break; case 0x01U: opcode_01(); break; case 0x02U: opcode_02(); break; case 0x03U: opcode_03(); break; case 0x04U: opcode_04(); break; case 0x05U: opcode_05(); break; case 0x06U: opcode_06(); break; case 0x07U: opcode_07(); break; case 0x08U: opcode_08(); break; case 0x09U: opcode_09(); break; case 0x0AU: opcode_0A(); break; case 0x0BU: opcode_0B(); break; case 0x0CU: opcode_0C(); break; case 0x0DU: opcode_0D(); break; case 0x0EU: opcode_0E(); break; case 0x0FU: opcode_0F(); break;
        case 0x10U: opcode_10(); break; case 0x11U: opcode_11(); break; case 0x12U: opcode_12(); break; case 0x13U: opcode_13(); break; case 0x14U: opcode_14(); break; case 0x15U: opcode_15(); break; case 0x16U: opcode_16(); break; case 0x17U: opcode_17(); break; case 0x18U: opcode_18(); break; case 0x19U: opcode_19(); break; case 0x1AU: opcode_1A(); break; case 0x1BU: opcode_1B(); break; case 0x1CU: opcode_1C(); break; case 0x1DU: opcode_1D(); break; case 0x1EU: opcode_1E(); break; case 0x1FU: opcode_1F(); break;
        case 0x20U: opcode_20(); break; case 0x21U: opcode_21(); break; case 0x22U: opcode_22(); break; case 0x23U: opcode_23(); break; case 0x24U: opcode_24(); break; case 0x25U: opcode_25(); break; case 0x26U: opcode_26(); break; case 0x27U: opcode_27(); break; case 0x28U: opcode_28(); break; case 0x29U: opcode_29(); break; case 0x2AU: opcode_2A(); break; case 0x2BU: opcode_2B(); break; case 0x2CU: opcode_2C(); break; case 0x2DU: opcode_2D(); break; case 0x2EU: opcode_2E(); break; case 0x2FU: opcode_2F(); break;
        case 0x30U: opcode_30(); break; case 0x31U: opcode_31(); break; case 0x32U: opcode_32(); break; case 0x33U: opcode_33(); break; case 0x34U: opcode_34(); break; case 0x35U: opcode_35(); break; case 0x36U: opcode_36(); break; case 0x37U: opcode_37(); break; case 0x38U: opcode_38(); break; case 0x39U: opcode_39(); break; case 0x3AU: opcode_3A(); break; case 0x3BU: opcode_3B(); break; case 0x3CU: opcode_3C(); break; case 0x3DU: opcode_3D(); break; case 0x3EU: opcode_3E(); break; case 0x3FU: opcode_3F(); break;
        case 0x40U: opcode_40(); break; case 0x41U: opcode_41(); break; case 0x42U: opcode_42(); break; case 0x43U: opcode_43(); break; case 0x44U: opcode_44(); break; case 0x45U: opcode_45(); break; case 0x46U: opcode_46(); break; case 0x47U: opcode_47(); break; case 0x48U: opcode_48(); break; case 0x49U: opcode_49(); break; case 0x4AU: opcode_4A(); break; case 0x4BU: opcode_4B(); break; case 0x4CU: opcode_4C(); break; case 0x4DU: opcode_4D(); break; case 0x4EU: opcode_4E(); break; case 0x4FU: opcode_4F(); break;
        case 0x50U: opcode_50(); break; case 0x51U: opcode_51(); break; case 0x52U: opcode_52(); break; case 0x53U: opcode_53(); break; case 0x54U: opcode_54(); break; case 0x55U: opcode_55(); break; case 0x56U: opcode_56(); break; case 0x57U: opcode_57(); break; case 0x58U: opcode_58(); break; case 0x59U: opcode_59(); break; case 0x5AU: opcode_5A(); break; case 0x5BU: opcode_5B(); break; case 0x5CU: opcode_5C(); break; case 0x5DU: opcode_5D(); break; case 0x5EU: opcode_5E(); break; case 0x5FU: opcode_5F(); break;
        case 0x60U: opcode_60(); break; case 0x61U: opcode_61(); break; case 0x62U: opcode_62(); break; case 0x63U: opcode_63(); break; case 0x64U: opcode_64(); break; case 0x65U: opcode_65(); break; case 0x66U: opcode_66(); break; case 0x67U: opcode_67(); break; case 0x68U: opcode_68(); break; case 0x69U: opcode_69(); break; case 0x6AU: opcode_6A(); break; case 0x6BU: opcode_6B(); break; case 0x6CU: opcode_6C(); break; case 0x6DU: opcode_6D(); break; case 0x6EU: opcode_6E(); break; case 0x6FU: opcode_6F(); break;
        case 0x70U: opcode_70(); break; case 0x71U: opcode_71(); break; case 0x72U: opcode_72(); break; case 0x73U: opcode_73(); break; case 0x74U: opcode_74(); break; case 0x75U: opcode_75(); break; case 0x76U: opcode_76(); break; case 0x77U: opcode_77(); break; case 0x78U: opcode_78(); break; case 0x79U: opcode_79(); break; case 0x7AU: opcode_7A(); break; case 0x7BU: opcode_7B(); break; case 0x7CU: opcode_7C(); break; case 0x7DU: opcode_7D(); break; case 0x7EU: opcode_7E(); break; case 0x7FU: opcode_7F(); break;
        case 0x80U: opcode_80(); break; case 0x81U: opcode_81(); break; case 0x82U: opcode_82(); break; case 0x83U: opcode_83(); break; case 0x84U: opcode_84(); break; case 0x85U: opcode_85(); break; case 0x86U: opcode_86(); break; case 0x87U: opcode_87(); break; case 0x88U: opcode_88(); break; case 0x89U: opcode_89(); break; case 0x8AU: opcode_8A(); break; case 0x8BU: opcode_8B(); break; case 0x8CU: opcode_8C(); break; case 0x8DU: opcode_8D(); break; case 0x8EU: opcode_8E(); break; case 0x8FU: opcode_8F(); break;
        case 0x90U: opcode_90(); break; case 0x91U: opcode_91(); break; case 0x92U: opcode_92(); break; case 0x93U: opcode_93(); break; case 0x94U: opcode_94(); break; case 0x95U: opcode_95(); break; case 0x96U: opcode_96(); break; case 0x97U: opcode_97(); break; case 0x98U: opcode_98(); break; case 0x99U: opcode_99(); break; case 0x9AU: opcode_9A(); break; case 0x9BU: opcode_9B(); break; case 0x9CU: opcode_9C(); break; case 0x9DU: opcode_9D(); break; case 0x9EU: opcode_9E(); break; case 0x9FU: opcode_9F(); break;
        case 0xA0U: opcode_A0(); break; case 0xA1U: opcode_A1(); break; case 0xA2U: opcode_A2(); break; case 0xA3U: opcode_A3(); break; case 0xA4U: opcode_A4(); break; case 0xA5U: opcode_A5(); break; case 0xA6U: opcode_A6(); break; case 0xA7U: opcode_A7(); break; case 0xA8U: opcode_A8(); break; case 0xA9U: opcode_A9(); break; case 0xAAU: opcode_AA(); break; case 0xABU: opcode_AB(); break; case 0xACU: opcode_AC(); break; case 0xADU: opcode_AD(); break; case 0xAEU: opcode_AE(); break; case 0xAFU: opcode_AF(); break;
        case 0xB0U: opcode_B0(); break; case 0xB1U: opcode_B1(); break; case 0xB2U: opcode_B2(); break; case 0xB3U: opcode_B3(); break; case 0xB4U: opcode_B4(); break; case 0xB5U: opcode_B5(); break; case 0xB6U: opcode_B6(); break; case 0xB7U: opcode_B7(); break; case 0xB8U: opcode_B8(); break; case 0xB9U: opcode_B9(); break; case 0xBAU: opcode_BA(); break; case 0xBBU: opcode_BB(); break; case 0xBCU: opcode_BC(); break; case 0xBDU: opcode_BD(); break; case 0xBEU: opcode_BE(); break; case 0xBFU: opcode_BF(); break;
        case 0xC0U: opcode_C0(); break; case 0xC1U: opcode_C1(); break; case 0xC2U: opcode_C2(); break; case 0xC3U: opcode_C3(); break; case 0xC4U: opcode_C4(); break; case 0xC5U: opcode_C5(); break; case 0xC6U: opcode_C6(); break; case 0xC7U: opcode_C7(); break; case 0xC8U: opcode_C8(); break; case 0xC9U: opcode_C9(); break; case 0xCAU: opcode_CA(); break; case 0xCBU: opcode_CB(); break; case 0xCCU: opcode_CC(); break; case 0xCDU: opcode_CD(); break; case 0xCEU: opcode_CE(); break; case 0xCFU: opcode_CF(); break;
        case 0xD0U: opcode_D0(); break; case 0xD1U: opcode_D1(); break; case 0xD2U: opcode_D2(); break; case 0xD3U: opcode_D3(); break; case 0xD4U: opcode_D4(); break; case 0xD5U: opcode_D5(); break; case 0xD6U: opcode_D6(); break; case 0xD7U: opcode_D7(); break; case 0xD8U: opcode_D8(); break; case 0xD9U: opcode_D9(); break; case 0xDAU: opcode_DA(); break; case 0xDBU: opcode_DB(); break; case 0xDCU: opcode_DC(); break; case 0xDDU: opcode_DD(); break; case 0xDEU: opcode_DE(); break; case 0xDFU: opcode_DF(); break;
        case 0xE0U: opcode_E0(); break; case 0xE1U: opcode_E1(); break; case 0xE2U: opcode_E2(); break; case 0xE3U: opcode_E3(); break; case 0xE4U: opcode_E4(); break; case 0xE5U: opcode_E5(); break; case 0xE6U: opcode_E6(); break; case 0xE7U: opcode_E7(); break; case 0xE8U: opcode_E8(); break; case 0xE9U: opcode_E9(); break; case 0xEAU: opcode_EA(); break; case 0xEBU: opcode_EB(); break; case 0xECU: opcode_EC(); break; case 0xEDU: opcode_ED(); break; case 0xEEU: opcode_EE(); break; case 0xEFU: opcode_EF(); break;
        case 0xF0U: opcode_F0(); break; case 0xF1U: opcode_F1(); break; case 0xF2U: opcode_F2(); break; case 0xF3U: opcode_F3(); break; case 0xF4U: opcode_F4(); break; case 0xF5U: opcode_F5(); break; case 0xF6U: opcode_F6(); break; case 0xF7U: opcode_F7(); break; case 0xF8U: opcode_F8(); break; case 0xF9U: opcode_F9(); break; case 0xFAU: opcode_FA(); break; case 0xFBU: opcode_FB(); break; case 0xFCU: opcode_FC(); break; case 0xFDU: opcode_FD(); break; case 0xFEU: opcode_FE(); break; case 0xFFU: opcode_FF(); break;
    }

    return !cpu->branch_taken ? opcode_cycles[opcode] : opcode_cycles_branched[opcode];
}

Cycles OpcodeHandler::handle_cb_opcode(u8 cb_opcode) {
  log_trace("%s (CB 0x%x)", opcode_cb_names[cb_opcode].c_str(), cb_opcode);

  switch (cb_opcode) {
        case 0x00U: opcode_CB_00(); break; case 0x01U: opcode_CB_01(); break; case 0x02U: opcode_CB_02(); break; case 0x03U: opcode_CB_03(); break; case 0x04U: opcode_CB_04(); break; case 0x05U: opcode_CB_05(); break; case 0x06U: opcode_CB_06(); break; case 0x07U: opcode_CB_07(); break; case 0x08U: opcode_CB_08(); break; case 0x09U: opcode_CB_09(); break; case 0x0AU: opcode_CB_0A(); break; case 0x0BU: opcode_CB_0B(); break; case 0x0CU: opcode_CB_0C(); break; case 0x0DU: opcode_CB_0D(); break; case 0x0EU: opcode_CB_0E(); break; case 0x0FU: opcode_CB_0F(); break;
        case 0x10U: opcode_CB_10(); break; case 0x11U: opcode_CB_11(); break; case 0x12U: opcode_CB_12(); break; case 0x13U: opcode_CB_13(); break; case 0x14U: opcode_CB_14(); break; case 0x15U: opcode_CB_15(); break; case 0x16U: opcode_CB_16(); break; case 0x17U: opcode_CB_17(); break; case 0x18U: opcode_CB_18(); break; case 0x19U: opcode_CB_19(); break; case 0x1AU: opcode_CB_1A(); break; case 0x1BU: opcode_CB_1B(); break; case 0x1CU: opcode_CB_1C(); break; case 0x1DU: opcode_CB_1D(); break; case 0x1EU: opcode_CB_1E(); break; case 0x1FU: opcode_CB_1F(); break;
        case 0x20U: opcode_CB_20(); break; case 0x21U: opcode_CB_21(); break; case 0x22U: opcode_CB_22(); break; case 0x23U: opcode_CB_23(); break; case 0x24U: opcode_CB_24(); break; case 0x25U: opcode_CB_25(); break; case 0x26U: opcode_CB_26(); break; case 0x27U: opcode_CB_27(); break; case 0x28U: opcode_CB_28(); break; case 0x29U: opcode_CB_29(); break; case 0x2AU: opcode_CB_2A(); break; case 0x2BU: opcode_CB_2B(); break; case 0x2CU: opcode_CB_2C(); break; case 0x2DU: opcode_CB_2D(); break; case 0x2EU: opcode_CB_2E(); break; case 0x2FU: opcode_CB_2F(); break;
        case 0x30U: opcode_CB_30(); break; case 0x31U: opcode_CB_31(); break; case 0x32U: opcode_CB_32(); break; case 0x33U: opcode_CB_33(); break; case 0x34U: opcode_CB_34(); break; case 0x35U: opcode_CB_35(); break; case 0x36U: opcode_CB_36(); break; case 0x37U: opcode_CB_37(); break; case 0x38U: opcode_CB_38(); break; case 0x39U: opcode_CB_39(); break; case 0x3AU: opcode_CB_3A(); break; case 0x3BU: opcode_CB_3B(); break; case 0x3CU: opcode_CB_3C(); break; case 0x3DU: opcode_CB_3D(); break; case 0x3EU: opcode_CB_3E(); break; case 0x3FU: opcode_CB_3F(); break;
        case 0x40U: opcode_CB_40(); break; case 0x41U: opcode_CB_41(); break; case 0x42U: opcode_CB_42(); break; case 0x43U: opcode_CB_43(); break; case 0x44U: opcode_CB_44(); break; case 0x45U: opcode_CB_45(); break; case 0x46U: opcode_CB_46(); break; case 0x47U: opcode_CB_47(); break; case 0x48U: opcode_CB_48(); break; case 0x49U: opcode_CB_49(); break; case 0x4AU: opcode_CB_4A(); break; case 0x4BU: opcode_CB_4B(); break; case 0x4CU: opcode_CB_4C(); break; case 0x4DU: opcode_CB_4D(); break; case 0x4EU: opcode_CB_4E(); break; case 0x4FU: opcode_CB_4F(); break;
        case 0x50U: opcode_CB_50(); break; case 0x51U: opcode_CB_51(); break; case 0x52U: opcode_CB_52(); break; case 0x53U: opcode_CB_53(); break; case 0x54U: opcode_CB_54(); break; case 0x55U: opcode_CB_55(); break; case 0x56U: opcode_CB_56(); break; case 0x57U: opcode_CB_57(); break; case 0x58U: opcode_CB_58(); break; case 0x59U: opcode_CB_59(); break; case 0x5AU: opcode_CB_5A(); break; case 0x5BU: opcode_CB_5B(); break; case 0x5CU: opcode_CB_5C(); break; case 0x5DU: opcode_CB_5D(); break; case 0x5EU: opcode_CB_5E(); break; case 0x5FU: opcode_CB_5F(); break;
        case 0x60U: opcode_CB_60(); break; case 0x61U: opcode_CB_61(); break; case 0x62U: opcode_CB_62(); break; case 0x63U: opcode_CB_63(); break; case 0x64U: opcode_CB_64(); break; case 0x65U: opcode_CB_65(); break; case 0x66U: opcode_CB_66(); break; case 0x67U: opcode_CB_67(); break; case 0x68U: opcode_CB_68(); break; case 0x69U: opcode_CB_69(); break; case 0x6AU: opcode_CB_6A(); break; case 0x6BU: opcode_CB_6B(); break; case 0x6CU: opcode_CB_6C(); break; case 0x6DU: opcode_CB_6D(); break; case 0x6EU: opcode_CB_6E(); break; case 0x6FU: opcode_CB_6F(); break;
        case 0x70U: opcode_CB_70(); break; case 0x71U: opcode_CB_71(); break; case 0x72U: opcode_CB_72(); break; case 0x73U: opcode_CB_73(); break; case 0x74U: opcode_CB_74(); break; case 0x75U: opcode_CB_75(); break; case 0x76U: opcode_CB_76(); break; case 0x77U: opcode_CB_77(); break; case 0x78U: opcode_CB_78(); break; case 0x79U: opcode_CB_79(); break; case 0x7AU: opcode_CB_7A(); break; case 0x7BU: opcode_CB_7B(); break; case 0x7CU: opcode_CB_7C(); break; case 0x7DU: opcode_CB_7D(); break; case 0x7EU: opcode_CB_7E(); break; case 0x7FU: opcode_CB_7F(); break;
        case 0x80U: opcode_CB_80(); break; case 0x81U: opcode_CB_81(); break; case 0x82U: opcode_CB_82(); break; case 0x83U: opcode_CB_83(); break; case 0x84U: opcode_CB_84(); break; case 0x85U: opcode_CB_85(); break; case 0x86U: opcode_CB_86(); break; case 0x87U: opcode_CB_87(); break; case 0x88U: opcode_CB_88(); break; case 0x89U: opcode_CB_89(); break; case 0x8AU: opcode_CB_8A(); break; case 0x8BU: opcode_CB_8B(); break; case 0x8CU: opcode_CB_8C(); break; case 0x8DU: opcode_CB_8D(); break; case 0x8EU: opcode_CB_8E(); break; case 0x8FU: opcode_CB_8F(); break;
        case 0x90U: opcode_CB_90(); break; case 0x91U: opcode_CB_91(); break; case 0x92U: opcode_CB_92(); break; case 0x93U: opcode_CB_93(); break; case 0x94U: opcode_CB_94(); break; case 0x95U: opcode_CB_95(); break; case 0x96U: opcode_CB_96(); break; case 0x97U: opcode_CB_97(); break; case 0x98U: opcode_CB_98(); break; case 0x99U: opcode_CB_99(); break; case 0x9AU: opcode_CB_9A(); break; case 0x9BU: opcode_CB_9B(); break; case 0x9CU: opcode_CB_9C(); break; case 0x9DU: opcode_CB_9D(); break; case 0x9EU: opcode_CB_9E(); break; case 0x9FU: opcode_CB_9F(); break;
        case 0xA0U: opcode_CB_A0(); break; case 0xA1U: opcode_CB_A1(); break; case 0xA2U: opcode_CB_A2(); break; case 0xA3U: opcode_CB_A3(); break; case 0xA4U: opcode_CB_A4(); break; case 0xA5U: opcode_CB_A5(); break; case 0xA6U: opcode_CB_A6(); break; case 0xA7U: opcode_CB_A7(); break; case 0xA8U: opcode_CB_A8(); break; case 0xA9U: opcode_CB_A9(); break; case 0xAAU: opcode_CB_AA(); break; case 0xABU: opcode_CB_AB(); break; case 0xACU: opcode_CB_AC(); break; case 0xADU: opcode_CB_AD(); break; case 0xAEU: opcode_CB_AE(); break; case 0xAFU: opcode_CB_AF(); break;
        case 0xB0U: opcode_CB_B0(); break; case 0xB1U: opcode_CB_B1(); break; case 0xB2U: opcode_CB_B2(); break; case 0xB3U: opcode_CB_B3(); break; case 0xB4U: opcode_CB_B4(); break; case 0xB5U: opcode_CB_B5(); break; case 0xB6U: opcode_CB_B6(); break; case 0xB7U: opcode_CB_B7(); break; case 0xB8U: opcode_CB_B8(); break; case 0xB9U: opcode_CB_B9(); break; case 0xBAU: opcode_CB_BA(); break; case 0xBBU: opcode_CB_BB(); break; case 0xBCU: opcode_CB_BC(); break; case 0xBDU: opcode_CB_BD(); break; case 0xBEU: opcode_CB_BE(); break; case 0xBFU: opcode_CB_BF(); break;
        case 0xC0U: opcode_CB_C0(); break; case 0xC1U: opcode_CB_C1(); break; case 0xC2U: opcode_CB_C2(); break; case 0xC3U: opcode_CB_C3(); break; case 0xC4U: opcode_CB_C4(); break; case 0xC5U: opcode_CB_C5(); break; case 0xC6U: opcode_CB_C6(); break; case 0xC7U: opcode_CB_C7(); break; case 0xC8U: opcode_CB_C8(); break; case 0xC9U: opcode_CB_C9(); break; case 0xCAU: opcode_CB_CA(); break; case 0xCBU: opcode_CB_CB(); break; case 0xCCU: opcode_CB_CC(); break; case 0xCDU: opcode_CB_CD(); break; case 0xCEU: opcode_CB_CE(); break; case 0xCFU: opcode_CB_CF(); break;
        case 0xD0U: opcode_CB_D0(); break; case 0xD1U: opcode_CB_D1(); break; case 0xD2U: opcode_CB_D2(); break; case 0xD3U: opcode_CB_D3(); break; case 0xD4U: opcode_CB_D4(); break; case 0xD5U: opcode_CB_D5(); break; case 0xD6U: opcode_CB_D6(); break; case 0xD7U: opcode_CB_D7(); break; case 0xD8U: opcode_CB_D8(); break; case 0xD9U: opcode_CB_D9(); break; case 0xDAU: opcode_CB_DA(); break; case 0xDBU: opcode_CB_DB(); break; case 0xDCU: opcode_CB_DC(); break; case 0xDDU: opcode_CB_DD(); break; case 0xDEU: opcode_CB_DE(); break; case 0xDFU: opcode_CB_DF(); break;
        case 0xE0U: opcode_CB_E0(); break; case 0xE1U: opcode_CB_E1(); break; case 0xE2U: opcode_CB_E2(); break; case 0xE3U: opcode_CB_E3(); break; case 0xE4U: opcode_CB_E4(); break; case 0xE5U: opcode_CB_E5(); break; case 0xE6U: opcode_CB_E6(); break; case 0xE7U: opcode_CB_E7(); break; case 0xE8U: opcode_CB_E8(); break; case 0xE9U: opcode_CB_E9(); break; case 0xEAU: opcode_CB_EA(); break; case 0xEBU: opcode_CB_EB(); break; case 0xECU: opcode_CB_EC(); break; case 0xEDU: opcode_CB_ED(); break; case 0xEEU: opcode_CB_EE(); break; case 0xEFU: opcode_CB_EF(); break;
        case 0xF0U: opcode_CB_F0(); break; case 0xF1U: opcode_CB_F1(); break; case 0xF2U: opcode_CB_F2(); break; case 0xF3U: opcode_CB_F3(); break; case 0xF4U: opcode_CB_F4(); break; case 0xF5U: opcode_CB_F5(); break; case 0xF6U: opcode_CB_F6(); break; case 0xF7U: opcode_CB_F7(); break; case 0xF8U: opcode_CB_F8(); break; case 0xF9U: opcode_CB_F9(); break; case 0xFAU: opcode_CB_FA(); break; case 0xFBU: opcode_CB_FB(); break; case 0xFCU: opcode_CB_FC(); break; case 0xFDU: opcode_CB_FD(); break; case 0xFEU: opcode_CB_FE(); break; case 0xFFU: opcode_CB_FF(); break;
    }

    return opcode_cycles_cb[cb_opcode];
}

// clang-format on
